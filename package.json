{
  "name": "backend-nestjs-monolite",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "engines": {
    "node": ">=18.0.0"
  },
  "_moduleAliases": {
    "@root": ".",
    "@shared": "src/shared",
    "@auth-jwt": "src/modules/auth-jwt",
    "@auth-session": "src/modules/auth-session",
    "@certificate": "src/modules/certificate"
  },
  "scripts": {
    "---------------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "db:reset": "docker exec -it nmt-app npx ts-node -r tsconfig-paths/register src/modules/prisma/clearDb.ts",
    "db:remove": "docker exec -it nmt-db_container psql -h localhost -U postgres -c \"DROP DATABASE somedb WITH (FORCE)\"",
    "db:restore:sql": "docker exec -it nmt-db_container psql -h localhost -U postgres -c \"CREATE DATABASE somedb\" && docker exec -it nmt-db_container psql -h localhost -d somedb -U postgres -f /backups/dumb.sql",
    "db:create-dump:sql": "docker exec -it nmt-db_container pg_dump -h localhost -U postgres -d somedb > backups/dumb.sql",
    "--------------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "app:restart-in-test-mode": "docker-compose -f docker-compose.local.yml down && docker-compose -f docker-compose.test.yml up -d",
    "app:restart-in-dev-mode": "docker-compose -f docker-compose.test.yml down && docker-compose -f docker-compose.local.yml up -d",
    "app:restart-app": "docker-compose -f docker-compose.local.yml down app && docker-compose -f docker-compose.local.yml up app -d",
    "-------------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "test:e2e:restart": "npm run app:restart-in-test-mode && npm run test:e2e",
    "test:e2e": "docker exec -it nmt-app npx jest -i --no-cache --config ./test/configs/jest-e2e.config.ts --verbose --forceExit",
    "test:e2e:certificates": "docker exec -it nmt-app npx jest --testPathPattern=certificates -i --no-cache --config ./test/configs/jest-e2e.config.ts --verbose --forceExit",
    "test:e2e:auth": "docker exec -it nmt-app npx jest --testPathPattern=auth-jwt-piece -i --no-cache --config ./test/configs/jest-e2e.config.ts --verbose --forceExit",
    "test:e2e:auth-session": "docker exec -it nmt-app npx jest --testPathPattern=auth-session-piece -i --no-cache --config ./test/configs/jest-e2e.config.ts --verbose --forceExit",
    "------------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "test:unit:restart": "npm run app:restart-in-test-mode && npm run test:unit",
    "test:unit": "docker exec -it nmt-app npx jest --config ./test/configs/jest-unit.config.ts",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "----------------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "test:integration:restart": "npm run app:restart-in-test-mode && npm run test:integration",
    "test:integration": "docker exec -it nmt-app npx jest --config ./test/configs/jest-integration.config.ts --verbose --forceExit",
    "test:integration:redis": "docker exec -it nmt-app npx jest --testPathPattern=redis --config ./test/configs/jest-integration.config.ts --verbose --forceExit",
    "-------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "test:all:restart": "npm run app:restart-in-test-mode && npm run test:all",
    "test:all": "npm run test:integration && npm run test:e2e",
    "-----------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "prisma:studio": "npx prisma studio",
    "prisma:format": "npx prisma format",
    "prisma:generate": "npx prisma generate --schema src/shared/modules/prisma/schema.prisma",
    "prisma:init-migration": "npx prisma migrate dev --name init --schema src/shared/modules/prisma/schema.prisma",
    "prisma:deploy": "npx prisma migrate deploy --schema src/shared/modules/prisma/schema.prisma",
    "prisma:create-migration": "npx prisma migrate dev --create-only --schema src/shared/modules/prisma/schema.prisma",
    "prisma:run-migration": "npx prisma migrate dev --schema src/shared/modules/prisma/schema.prisma",
    "prisma:reset": "npx prisma migrate reset --force --schema src/shared/modules/prisma/schema.prisma",
    "prisma:seed": "ts-node -r tsconfig-paths/register src/shared/modules/prisma/seed.ts",
    "----------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "docker:prisma:init-migration": "docker exec -it nmt-app npm run prisma:init-migration",
    "docker:prisma:deploy": "docker exec -it nmt-app npm run prisma:deploy",
    "docker:prisma:create-migration": "docker exec -it nmt-app npm run prisma:create-migration",
    "docker:prisma:run-migration": "docker exec -it nmt-app npm run prisma:run-migration",
    "docker:prisma:reset": "docker exec -it nmt-app npm run prisma:reset",
    "docker:prisma:seed": "docker exec -it nmt-app npm run prisma:seed",
    "---------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "prebuild": "rimraf ./dist",
    "postbuild": "rimraf ./dist/**/*.map",
    "build": "nest build",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:prod": "node dist/main",
    "start:debug": "nest start --debug --watch",
    "--------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "lint:check": "eslint \"{src,test}/**/*.ts\"",
    "lint:fix": "eslint \"{src,test}/**/*.ts\" --fix",
    "format": "prettier --write \"src/**/*.ts\"",
    "typecheck": "tsc --noEmit",
    "typecheck:watch": "tsc --noEmit --watch",
    "graph:deps:generate:v1": "npx depcruise src --include-only '^src' --output-type dot | dot -T svg > ./docs/dependency-graph-v1.svg",
    "graph:deps:generate:v2": "npx depcruise src --include-only '^src' --progress  --config .dependency-cruiser.js --output-type dot | dot -T svg -Grankdir=TD | tee docs/dependency-graph-v2.svg | node node_modules/dependency-cruiser/bin/wrap-stream-in-html.mjs > docs/dependency-graph-v2.html",
    "graph:deps:generate:top-level": "npx depcruise src --include-only '^src' --config .dependency-cruiser.js --output-type ddot | dot -T svg -Grankdir=TD | tee docs/dependency-graph-top-level.svg | node node_modules/dependency-cruiser/bin/wrap-stream-in-html.mjs > docs/dependency-graph-top-level.html",
    "graph:deps:generate:all": "npm run graph:deps:generate:v1 && npm run graph:deps:generate:v2 && npm run graph:deps:generate:top-level",
    "graph:deps:check": "npx depcruise src",
    "------------------------------------------------------------------------------------------------------------------------------------------------": "",
    "docker:start": "docker-compose -f docker-compose.local.yml up",
    "docker:stop": "docker-compose -f docker-compose.local.yml down && docker-compose -f docker-compose.test.yml down",
    "docker:restart": "npm run docker:stop && npm run docker:start",
    "docker:rebuild-app": "docker-compose -f docker-compose.local.yml down app && docker rmi backend-nestjs-update-app && docker-compose -f docker-compose.local.yml up --build --no-deps -d app",
    "docker:clean:containers": "docker rm -f $(docker ps -a --filter name=^nmt- -q)",
    "docker:clean:dangling-images": "docker rmi $(docker images -f dangling=true -q)",
    "docker:clean:dangling-volumes": "docker volume rm $(docker volume ls -f dangling=true -q)",
    "docker:clean:full": "npm run docker:clean:containers && docker rmi backend-nestjs-update-app && npm run docker:clean:dangling-volumes && npm run docker:clean:dangling-images"
  },
  "dependencies": {
    "@anatine/zod-nestjs": "^2.0.3",
    "@anatine/zod-openapi": "^2.2.2",
    "@darraghor/eslint-plugin-nestjs-typed": "^4.4.0",
    "@nestjs-modules/mailer": "^1.10.3",
    "@nestjs/common": "^10.0.0",
    "@nestjs/config": "^3.1.1",
    "@nestjs/core": "^10.0.0",
    "@nestjs/elasticsearch": "^10.0.1",
    "@nestjs/jwt": "^10.2.0",
    "@nestjs/passport": "^10.0.3",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/schedule": "^4.0.0",
    "@nestjs/serve-static": "^4.0.0",
    "@nestjs/swagger": "^7.2.0",
    "@prisma/client": "^5.8.1",
    "archiver": "^6.0.1",
    "bcrypt": "^5.1.1",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.1",
    "colors": "^1.4.0",
    "connect-redis": "^7.1.1",
    "cookie-parser": "^1.4.6",
    "express": "^4.18.2",
    "express-session": "^1.18.0",
    "fast-glob": "^3.3.2",
    "handlebars": "^4.7.8",
    "ioredis": "^5.3.2",
    "joi": "^17.11.1",
    "module-alias": "^2.2.3",
    "nest-access-control": "^3.1.0",
    "nodemailer": "^6.9.8",
    "passport": "^0.7.0",
    "passport-custom": "^1.1.1",
    "passport-jwt": "^4.0.1",
    "pdfkit": "^0.14.0",
    "query-string": "^8.2.0",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.0",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "winston-logstash": "^1.2.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@types/archiver": "^6.0.2",
    "@types/bcrypt": "^5.0.2",
    "@types/colors": "^1.2.1",
    "@types/cookie-parser": "^1.4.6",
    "@types/express": "^4.17.17",
    "@types/express-session": "^1.17.10",
    "@types/ioredis": "^5.0.0",
    "@types/jest": "^29.5.2",
    "@types/multer": "^1.4.11",
    "@types/node": "^20.3.1",
    "@types/nodemailer": "^6.4.14",
    "@types/passport-jwt": "^4.0.0",
    "@types/pdfkit": "^0.13.3",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^9.0.7",
    "@types/winston": "^2.4.4",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "dependency-cruiser": "^16.2.0",
    "dotenv-cli": "^7.3.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-import-resolver-typescript": "^3.6.1",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "prisma": "^5.8.1",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.4",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  }
}
